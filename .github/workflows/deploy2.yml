name: Deploy to EC2 with Enhanced Logging

on:
  push:
    branches: [main, master]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
      - name: üöÄ Starting deployment
        run: echo "Starting deployment at $(date)"

      - name: üì• Sync repository from GitHub
        run: |
          echo "Syncing with GitHub repository..."
          
          # Navigate to your project directory
          cd ~/ECHOMATELITE/echo-mate-lite-main
          
          # Show current status
          echo "=== Current Status ==="
          git status
          git log -1 --oneline
          
          # Stash any local changes to avoid conflicts
          git stash push -m "Auto-stash before deployment $(date)"
          
          # Force fetch all branches and tags
          echo "=== Fetching from GitHub ==="
          git fetch --all --prune --force
          git fetch --tags --force
          
          # Determine the current branch or default to main
          CURRENT_BRANCH=$(git branch --show-current)
          if [ -z "$CURRENT_BRANCH" ] || [ "$CURRENT_BRANCH" = "HEAD" ]; then
            CURRENT_BRANCH="main"
            echo "Switching to main branch"
            git checkout main || git checkout -b main origin/main
          fi
          
          echo "Working on branch: $CURRENT_BRANCH"
          
          # Hard reset to the latest commit from GitHub
          echo "=== Resetting to latest GitHub version ==="
          git reset --hard origin/$CURRENT_BRANCH
          
          # Verify we have the latest changes
          echo "=== After Sync ==="
          git log -1 --oneline
          echo "=== Recent Commits ==="
          git log --oneline -5
          
          echo "‚úÖ Repository synced successfully"

      - name: üßπ Clean previous builds
        run: |
          echo "Cleaning old build artifacts..."
          cd ~/ECHOMATELITE/echo-mate-lite-main/frontend/twitterclone
          
          # Remove build directory and cache
          rm -rf build/
          rm -rf node_modules/.cache/
          
          # Clear npm cache
          npm cache clean --force
          
          echo "‚úÖ Clean completed"

      - name: üì¶ Install backend dependencies
        run: |
          echo "Installing backend dependencies..."
          cd ~/ECHOMATELITE/echo-mate-lite-main/backend
          
          # Clean install dependencies
          rm -rf node_modules/
          npm ci --only=production
          
          echo "‚úÖ Backend dependencies installed"

      - name: üîß Install frontend dependencies
        run: |
          echo "Installing frontend dependencies..."
          cd ~/ECHOMATELITE/echo-mate-lite-main/frontend/twitterclone
          
          # Clean install dependencies
          rm -rf node_modules/
          npm ci
          
          echo "‚úÖ Frontend dependencies installed"

      - name: üèóÔ∏è Build frontend application
        run: |
          echo "Building React application..."
          cd ~/ECHOMATELITE/echo-mate-lite-main/frontend/twitterclone
          
          # Set build environment
          export NODE_OPTIONS="--max-old-space-size=4096"
          export GENERATE_SOURCEMAP=false
          export CI=false
          
          # Build the application
          npm run build
          
          # Verify build output
          if [ -d "build" ]; then
            echo "‚úÖ Build directory created"
            echo "Build contents:"
            ls -la build/
            echo "Build size: $(du -sh build/)"
          else
            echo "‚ùå Build directory not found!"
            exit 1
          fi
          
          # Check for critical files
          if [ -f "build/index.html" ]; then
            echo "‚úÖ index.html exists"
            echo "HTML file size: $(wc -c < build/index.html) bytes"
          else
            echo "‚ùå index.html not found in build!"
            exit 1
          fi
          
          echo "‚úÖ Build completed successfully"

      - name: üîí Backup current deployment
        run: |
          echo "Creating backup of current deployment..."
          if [ -d "/var/www/html" ] && [ "$(ls -A /var/www/html 2>/dev/null)" ]; then
            sudo mkdir -p /var/backups/html-backups
            sudo cp -r /var/www/html "/var/backups/html-backups/backup-$(date +%Y%m%d-%H%M%S)"
            echo "‚úÖ Backup created successfully"
          else
            echo "‚ÑπÔ∏è No existing deployment to backup"
          fi

      - name: üöÄ Deploy frontend application
        run: |
          echo "Deploying frontend to web server..."
          
          # Stop Apache to prevent file locks
          sudo systemctl stop apache2
          
          # Clear old deployment completely
          sudo rm -rf /var/www/html/*
          sudo rm -rf /var/www/html/.[^.]*  # Remove hidden files
          
          # Add deployment verification file
          echo "Deployment timestamp: $(date)" | sudo tee /var/www/html/deployment.txt
          echo "Git commit: $(cd ~/ECHOMATELITE/echo-mate-lite-main && git log -1 --oneline)" | sudo tee -a /var/www/html/deployment.txt
          
          # Copy new build
          sudo cp -r ~/ECHOMATELITE/echo-mate-lite-main/frontend/twitterclone/build/* /var/www/html/
          
          # Set proper ownership and permissions
          sudo chown -R www-data:www-data /var/www/html/
          sudo chmod -R 755 /var/www/html/
          sudo find /var/www/html -type f -exec chmod 644 {} \;
          
          # Verify deployment
          echo "Deployed files:"
          sudo ls -la /var/www/html/
          echo "Index.html preview (first 5 lines):"
          sudo head -5 /var/www/html/index.html
          echo "Deployment info:"
          sudo cat /var/www/html/deployment.txt
          
          echo "‚úÖ Frontend deployed successfully"

      - name: üîß Configure Apache for React SPA
        run: |
          echo "Configuring Apache for Single Page Application..."
          
          # Enable required Apache modules
          sudo a2enmod rewrite headers expires
          
          # Create .htaccess for React Router support
          sudo tee /var/www/html/.htaccess > /dev/null << 'EOF'
          Options -MultiViews
          RewriteEngine On
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteRule ^ index.html [QSA,L]
          
          # Prevent caching of HTML files
          <Files "index.html">
          Header set Cache-Control "no-cache, no-store, must-revalidate"
          Header set Pragma "no-cache"
          Header set Expires "0"
          </Files>
          EOF
          
          sudo chown www-data:www-data /var/www/html/.htaccess
          sudo chmod 644 /var/www/html/.htaccess
          
          # Test Apache configuration
          sudo apache2ctl configtest
          echo "‚úÖ Apache configuration updated"

      - name: üîÑ Manage backend service
        run: |
          echo "Managing backend service..."
          
          # Navigate to backend directory
          cd ~/ECHOMATELITE/echo-mate-lite-main/backend
          
          # Check if PM2 process exists and restart/start accordingly
          if pm2 list | grep -q "echomatelite-backend"; then
            echo "Restarting existing backend process..."
            pm2 restart echomatelite-backend
          else
            echo "Starting new backend process..."
            pm2 start index.js --name echomatelite-backend
          fi
          
          # Wait for process to stabilize
          sleep 5
          
          # Verify backend is running
          if pm2 list | grep -q "echomatelite-backend.*online"; then
            echo "‚úÖ Backend service is running"
            pm2 show echomatelite-backend
          else
            echo "‚ùå Backend service failed to start"
            pm2 logs echomatelite-backend --lines 20
            exit 1
          fi

      - name: üåê Start web server
        run: |
          echo "Starting Apache web server..."
          
          # Test Apache configuration before starting
          if ! sudo apache2ctl configtest; then
            echo "‚ùå Apache configuration test failed"
            exit 1
          fi
          
          # Start Apache
          sudo systemctl start apache2
          sudo systemctl enable apache2
          
          # Wait for Apache to fully start
          sleep 3
          
          # Verify Apache is running
          if sudo systemctl is-active --quiet apache2; then
            echo "‚úÖ Apache is running successfully"
          else
            echo "‚ùå Apache failed to start"
            sudo systemctl status apache2
            sudo tail -10 /var/log/apache2/error.log
            exit 1
          fi

      - name: üß™ Perform deployment verification
        run: |
          echo "Verifying deployment..."
          
          # Wait for all services to be ready
          sleep 10
          
          # Test local HTTP connection
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost || echo "000")
          echo "Local HTTP Status: $HTTP_STATUS"
          
          # Test HTTPS connection
          HTTPS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://localhost -k || echo "000")
          echo "Local HTTPS Status: $HTTPS_STATUS"
          
          # Check if HTML content is being served
          CONTENT=$(curl -s http://localhost | head -10)
          if echo "$CONTENT" | grep -q "<!doctype html>"; then
            echo "‚úÖ HTML content is being served correctly"
          else
            echo "‚ö†Ô∏è Unexpected content served"
            echo "Content preview:"
            echo "$CONTENT"
          fi
          
          # Check deployment timestamp
          DEPLOY_CHECK=$(curl -s http://localhost/deployment.txt 2>/dev/null || echo "File not found")
          echo "Deployment verification:"
          echo "$DEPLOY_CHECK"
          
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "‚úÖ Website is accessible and serving content"
          else
            echo "‚ö†Ô∏è Website accessibility issues detected"
            echo "Checking Apache error logs:"
            sudo tail -20 /var/log/apache2/error.log
          fi

      - name: üìä Deployment summary
        run: |
          echo "================================="
          echo "üéâ DEPLOYMENT SUMMARY"
          echo "================================="
          echo "Deployment completed at: $(date)"
          echo "Git commit: $(cd ~/ECHOMATELITE/echo-mate-lite-main && git log -1 --oneline)"
          echo "Frontend build size: $(du -sh /var/www/html/ 2>/dev/null || echo 'Unknown')"
          echo "Backend status: $(pm2 list | grep echomatelite-backend || echo 'Not found')"
          echo "Apache status: $(sudo systemctl is-active apache2)"
          echo "Website URL: https://mytechops.cloud"
          echo "================================="

      - name: üßπ Cleanup
        if: always()
        run: |
          echo "Performing cleanup..."
          
          # Clean up old PM2 logs
          pm2 flush echomatelite-backend 2>/dev/null || true
          
          # Clean up old backups (keep last 3)
          sudo find /var/backups/html-backups -type d -name "backup-*" | sort | head -n -3 | sudo xargs rm -rf 2>/dev/null || true
          
          # Clean up temporary files
          cd ~/ECHOMATELITE/echo-mate-lite-main/frontend/twitterclone
          rm -rf node_modules/.cache/ 2>/dev/null || true
          
          echo "‚úÖ Cleanup completed"

      - name: üéâ Deployment complete
        run: |
          echo ""
          echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo ""
          echo "Your website has been updated with the latest changes."
          echo "Visit: https://mytechops.cloud"
          echo ""
          echo "If you don't see changes immediately:"
          echo "  1. Hard refresh: Ctrl+F5 (Windows/Linux) or Cmd+Shift+R (Mac)"
          echo "  2. Open in incognito/private mode"
          echo "  3. Clear browser cache for the site"
          echo "  4. Check deployment timestamp: https://mytechops.cloud/deployment.txt"
          echo ""