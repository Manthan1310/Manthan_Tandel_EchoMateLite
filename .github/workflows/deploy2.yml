name: Deploy to EC2 with Enhanced Logging

on:
  push:
    branches: [main, master]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
      - name: üöÄ Starting deployment
        run: echo "Starting deployment at $(date)"

      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for proper git operations

      - name: üîÑ Sync with remote
        run: |
          echo "Current branch: $(git branch --show-current)"
          git fetch --all --prune
          git reset --hard origin/$(git branch --show-current)
          echo "Latest commit: $(git log -1 --oneline)"

      - name: üßπ Clean previous builds
        run: |
          echo "Cleaning old build artifacts..."
          rm -rf ~/ECHOMATELITE/echo-mate-lite-main/frontend/twitterclone/build
          rm -rf ~/ECHOMATELITE/echo-mate-lite-main/frontend/twitterclone/node_modules/.cache

      - name: üì¶ Install and verify backend dependencies
        run: |
          echo "Installing backend dependencies..."
          cd ~/ECHOMATELITE/echo-mate-lite-main/backend
          npm ci --only=production
          echo "Backend dependencies installed successfully"
          ls -la node_modules/ | head -10

      - name: üîß Install frontend dependencies
        run: |
          echo "Installing frontend dependencies..."
          cd ~/ECHOMATELITE/echo-mate-lite-main/frontend/twitterclone
          npm ci
          echo "Frontend dependencies installed successfully"

      - name: üèóÔ∏è Build frontend application
        run: |
          echo "Building React application..."
          cd ~/ECHOMATELITE/echo-mate-lite-main/frontend/twitterclone
          export NODE_OPTIONS="--max-old-space-size=4096"
          export GENERATE_SOURCEMAP=false
          export CI=false
          npm run build
          echo "Build completed successfully"
          
          # Verify build output
          if [ -d "build" ]; then
            echo "‚úÖ Build directory created"
            echo "Build contents:"
            ls -la build/
            echo "Build size: $(du -sh build/)"
          else
            echo "‚ùå Build directory not found!"
            exit 1
          fi

      - name: üß™ Verify build integrity
        run: |
          cd ~/ECHOMATELITE/echo-mate-lite-main/frontend/twitterclone/build
          if [ -f "index.html" ]; then
            echo "‚úÖ index.html exists"
            echo "HTML file size: $(wc -c < index.html) bytes"
          else
            echo "‚ùå index.html not found in build!"
            exit 1
          fi
          
          if [ -d "static" ]; then
            echo "‚úÖ Static assets directory exists"
            echo "Static files count: $(find static -type f | wc -l)"
          else
            echo "‚ö†Ô∏è No static directory found"
          fi

      - name: üîí Backup current deployment
        run: |
          echo "Creating backup of current deployment..."
          if [ -d "/var/www/html" ] && [ "$(ls -A /var/www/html)" ]; then
            sudo mkdir -p /var/backups/html-backups
            sudo cp -r /var/www/html "/var/backups/html-backups/backup-$(date +%Y%m%d-%H%M%S)"
            echo "‚úÖ Backup created successfully"
          else
            echo "‚ÑπÔ∏è No existing deployment to backup"
          fi

      - name: üöÄ Deploy frontend application
        run: |
          echo "Deploying frontend to web server..."
          
          # Stop Apache to prevent file locks
          sudo systemctl stop apache2
          
          # Clear old deployment completely
          sudo rm -rf /var/www/html/*
          sudo rm -rf /var/www/html/.[^.]*  # Remove hidden files
          
          # Add timestamp to verify deployment
          echo "Deployment timestamp: $(date)" | sudo tee /var/www/html/deployment.txt
          
          # Copy new build
          sudo cp -r ~/ECHOMATELITE/echo-mate-lite-main/frontend/twitterclone/build/* /var/www/html/
          
          # Set proper ownership and permissions
          sudo chown -R www-data:www-data /var/www/html/
          sudo chmod -R 755 /var/www/html/
          sudo find /var/www/html -type f -exec chmod 644 {} \;
          
          # Verify deployment with file content check
          echo "Deployed files:"
          sudo ls -la /var/www/html/
          echo "Index.html preview:"
          sudo head -10 /var/www/html/index.html
          echo "Deployment timestamp file:"
          sudo cat /var/www/html/deployment.txt
          
          echo "‚úÖ Frontend deployed successfully"

      - name: üîß Configure Apache for React SPA
        run: |
          echo "Configuring Apache for Single Page Application..."
          
          # Create simple .htaccess for React Router support
          sudo tee /var/www/html/.htaccess > /dev/null << 'EOF'
          Options -MultiViews
          RewriteEngine On
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteRule ^ index.html [QSA,L]
          
          # Prevent caching of HTML files
          <Files "index.html">
          Header set Cache-Control "no-cache, no-store, must-revalidate"
          Header set Pragma "no-cache"
          Header set Expires "0"
          </Files>
          EOF
          
          sudo chown www-data:www-data /var/www/html/.htaccess
          sudo chmod 644 /var/www/html/.htaccess
          
          # Test Apache configuration
          sudo apache2ctl configtest
          echo "‚úÖ Apache configuration updated"

      - name: üîÑ Restart backend service
        run: |
          echo "Managing backend service..."
          
          # Check if PM2 process exists
          if pm2 list | grep -q "echomatelite-backend"; then
            echo "Restarting existing backend process..."
            pm2 restart echomatelite-backend
          else
            echo "Starting new backend process..."
            cd ~/ECHOMATELITE/echo-mate-lite-main/backend
            pm2 start index.js --name echomatelite-backend
          fi
          
          # Verify backend is running
          sleep 3
          pm2 show echomatelite-backend
          echo "‚úÖ Backend service updated"

      - name: üåê Start web server
        run: |
          echo "Starting Apache web server..."
          
          # Test Apache configuration
          sudo apache2ctl configtest
          
          # Start Apache
          sudo systemctl start apache2
          sudo systemctl enable apache2
          
          # Verify Apache is running
          if sudo systemctl is-active --quiet apache2; then
            echo "‚úÖ Apache is running successfully"
          else
            echo "‚ùå Apache failed to start"
            sudo systemctl status apache2
            exit 1
          fi

      - name: üß™ Perform deployment verification
        run: |
          echo "Verifying deployment..."
          
          # Wait for services to be fully ready
          sleep 5
          
          # Check if website is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost || echo "000")
          echo "HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Website is accessible (HTTP 200)"
          else
            echo "‚ö†Ô∏è Website returned HTTP $HTTP_STATUS"
            echo "Apache error log (last 10 lines):"
            sudo tail -10 /var/log/apache2/error.log || echo "No error log found"
          fi
          
          # Check if React app loads properly
          CONTENT=$(curl -s http://localhost | head -20)
          if echo "$CONTENT" | grep -q "<!doctype html>"; then
            echo "‚úÖ HTML content is being served"
          else
            echo "‚ö†Ô∏è Unexpected content served"
          fi

      - name: üìä Deployment summary
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          echo "Deployment completed at: $(date)"
          echo "Commit: $(git log -1 --oneline)"
          echo "Frontend build size: $(du -sh /var/www/html/)"
          echo "Backend status: $(pm2 show echomatelite-backend | grep 'status' || echo 'Status check failed')"
          echo "Apache status: $(sudo systemctl is-active apache2)"
          echo "=========================="

      - name: üßπ Cleanup
        if: always()
        run: |
          echo "Performing cleanup..."
          # Clean up old PM2 logs
          pm2 flush
          
          # Clean up old backups (keep last 5)
          sudo find /var/backups/html-backups -type d -name "backup-*" | sort | head -n -5 | sudo xargs rm -rf 2>/dev/null || true
          
          echo "‚úÖ Cleanup completed"

      - name: üéâ Deployment complete
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "Your website should now be updated with the latest changes."
          echo "If you don't see changes, try:"
          echo "  1. Hard refresh your browser (Ctrl+F5 or Cmd+Shift+R)"
          echo "  2. Open in incognito/private mode"
          echo "  3. Clear browser cache"